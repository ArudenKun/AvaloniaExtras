name: "📦 Release"
on:
  # Make a release whenever the developer wants.
  workflow_dispatch:
    inputs:
      bump:
        type: string
        description: "major, minor, or patch"
        required: true
        default: "patch"

jobs:
  release:
    name: "📦 Release"
    runs-on: ubuntu-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_NOLOGO: true
    steps:
      - name: 🧾 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔎 Read Current Project Version
        id: current-version
        uses: WyriHaximus/github-action-get-previous-tag@v1
        with:
          fallback: "0.0.0-devbuild"

      - name: 🖨 Print Current Version
        run: |
          echo "Current Version: ${{ steps.current-version.outputs.tag }}"

      - name: 🧮 Compute Next Version
        uses: chickensoft-games/next-godot-csproj-version@v1
        id: next-version
        with:
          project-version: ${{ steps.current-version.outputs.tag }}
          godot-version: 1.0.0
          bump: ${{ inputs.bump }}

      # Write version to file so .NET will build correct version.
      - name: 📝 Write Version to File
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "0.0.0-devbuild"
          replace: ${{ steps.next-version.outputs.version }}
          regex: false
          include: Directory.Build.props

      - name: 📦 Build
        run: |
          dotnet build \
            GodotSharpExtras/GodotSharpExtras.csproj -c Release
          dotnet build \
            GodotSharpExtras.SourceGenerators/GodotSharpExtras.SourceGenerators.csproj -c Release

      - name: 🔎 Get Package Path
        id: package-path
        run: |
          package=$(find GodotSharpExtras/nupkg -type f -name "*.nupkg")
          echo "package=$package" >> "$GITHUB_OUTPUT"
          echo "📦 Found package: $package"

      - name: 🔎 Get Generator Package Path
        id: gen-package-path
        run: |
          package=$(find GodotSharpExtras.SourceGenerators/nupkg -type f -name "*.nupkg")
          echo "package=$package" >> "$GITHUB_OUTPUT"
          echo "📦 Found generator package: $package"

      - name: ✨ Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version="${{ steps.next-version.outputs.version }}"
          gh release create --title "v$version" --generate-notes "$version" \
            "${{ steps.package-path.outputs.package }}" "${{ steps.gen-package-path.outputs.package }}"

      - name: 🛜 Publish to Github Nuget
        run: |
          dotnet nuget push "${{ steps.package-path.outputs.package }}" \
            --api-key "${{ secrets.GITHUB_TOKEN }}" \
            --source "https://nuget.pkg.github.com/ArudenKun/index.json" --skip-duplicate

            dotnet nuget push "${{ steps.gen-package-path.outputs.package }}" \
            --api-key "${{ secrets.GITHUB_TOKEN }}" \
            --source "https://nuget.pkg.github.com/ArudenKun/index.json" --skip-duplicate
